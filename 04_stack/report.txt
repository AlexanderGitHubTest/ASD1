1. Задание №1 (п. 1).
Оцените меру сложности для операций pop и push (для стека из п.1).

1.1. Выполнение задания - pop:
    def pop(self):
        if self.size() > 0:                                # Сложность О(1)
            return self.stack.pop()                        # Сложность О(1)
        return None

Итого: О(1) + О(1) дают в пределе сложность О(1).

1.2. Выполнение задания - push:
    def pop(self):
        self.stack.append(value)                           # Сложность О(1)

Итого: сложность О(1).


2. Задание №2 (п. 3).
Не запуская программу, скажите, как отработает такой цикл?

while stack.size() > 0:
    print(stack.pop())
    print(stack.pop())

2.1. Ответ (использую 2-ю реализацию стека (которая работает с головой списка, как с верхушкой стека)): 
- если стек пуст, то тело цикла не исполнится;
- если в стеке четное число элементов, то будет выведено содержимое стека (от головы до хвоста);
- если в стеке нечетное число элементов, то будет выведено содержимое стека (от головы до хвоста), а затем None.


3. Задание №3 (п. 4).
Оцените меру сложности для операций pop и push (для 2-й реализации стека).

3.1. Выполнение задания - pop:
    def pop(self):
        if self.size() > 0:                                # Сложность О(1)
            return self.stack.pop(0)                       # Сложность О(N)
        return None

Итого: О(1) + О(N) дают в пределе сложность О(N).

3.2. Выполнение задания - push:
    def pop(self):
        self.stack.append(value)                           # Сложность О(1)

Итого: сложность О(1).
